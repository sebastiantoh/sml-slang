// Generated from src/lang/Sml.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SmlLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly WHITESPACE = 2;
	public static readonly INT = 3;
	public static readonly FLOAT = 4;
	public static readonly CHAR = 5;
	public static readonly STRING = 6;
	public static readonly LPAREN = 7;
	public static readonly RPAREN = 8;
	public static readonly REC = 9;
	public static readonly AND = 10;
	public static readonly SEMICOLON = 11;
	public static readonly SLASH = 12;
	public static readonly DIV = 13;
	public static readonly MOD = 14;
	public static readonly STAR = 15;
	public static readonly PLUS = 16;
	public static readonly MINUS = 17;
	public static readonly CARET = 18;
	public static readonly CONS = 19;
	public static readonly AT = 20;
	public static readonly EQ = 21;
	public static readonly NEQ = 22;
	public static readonly LT = 23;
	public static readonly GT = 24;
	public static readonly LTE = 25;
	public static readonly GTE = 26;
	public static readonly ID = 27;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "WHITESPACE", "INT", "FLOAT", "CHAR", "STRING", "DIGIT", "NUM", 
		"LETTER", "ESC", "SAFECODEPOINT", "ASCII", "LPAREN", "RPAREN", "REC", 
		"AND", "SEMICOLON", "SLASH", "DIV", "MOD", "STAR", "PLUS", "MINUS", "CARET", 
		"CONS", "AT", "EQ", "NEQ", "LT", "GT", "LTE", "GTE", "ID",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'val'", undefined, undefined, undefined, undefined, undefined, 
		"'('", "')'", "'rec'", "'and'", "';'", "'/'", "'div'", "'mod'", "'*'", 
		"'+'", "'-'", "'^'", "'::'", "'@'", "'='", "'<>'", "'<'", "'>'", "'<='", 
		"'>='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, "WHITESPACE", "INT", "FLOAT", "CHAR", "STRING", 
		"LPAREN", "RPAREN", "REC", "AND", "SEMICOLON", "SLASH", "DIV", "MOD", 
		"STAR", "PLUS", "MINUS", "CARET", "CONS", "AT", "EQ", "NEQ", "LT", "GT", 
		"LTE", "GTE", "ID",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SmlLexer._LITERAL_NAMES, SmlLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SmlLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SmlLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Sml.g4"; }

	// @Override
	public get ruleNames(): string[] { return SmlLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SmlLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SmlLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SmlLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1D\xC1\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x06\x03K\n\x03\r\x03\x0E\x03" +
		"L\x03\x03\x03\x03\x03\x04\x05\x04R\n\x04\x03\x04\x03\x04\x03\x05\x05\x05" +
		"W\n\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x03\x06\x03\x06\x03\x07\x03\x07\x07\x07e\n\x07\f\x07\x0E\x07h\v\x07\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\t\x06\to\n\t\r\t\x0E\tp\x03\n\x03\n\x03\v" +
		"\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x05\r|\n\r\x03\x0E\x03\x0E\x03\x0F" +
		"\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18" +
		"\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C" +
		"\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03" +
		" \x03!\x03!\x03!\x03\"\x03\"\x03\"\x03\"\x07\"\xB6\n\"\f\"\x0E\"\xB9\v" +
		"\"\x03\"\x06\"\xBC\n\"\r\"\x0E\"\xBD\x05\"\xC0\n\"\x02\x02\x02#\x03\x02" +
		"\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\x02\x11" +
		"\x02\x02\x13\x02\x02\x15\x02\x02\x17\x02\x02\x19\x02\x02\x1B\x02\t\x1D" +
		"\x02\n\x1F\x02\v!\x02\f#\x02\r%\x02\x0E\'\x02\x0F)\x02\x10+\x02\x11-\x02" +
		"\x12/\x02\x131\x02\x143\x02\x155\x02\x167\x02\x179\x02\x18;\x02\x19=\x02" +
		"\x1A?\x02\x1BA\x02\x1CC\x02\x1D\x03\x02\t\x05\x02\v\f\x0F\x0F\"\"\x03" +
		"\x022;\x04\x02C\\c|\n\x02$$11^^ddhhppttvv\x05\x02\x02!$$^^\x04\x02))a" +
		"a\x0E\x02##%(,-//11<<>B^^``bb~~\x80\x80\x02\xC5\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x02" +
		"7\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02" +
		"\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02" +
		"\x03E\x03\x02\x02\x02\x05J\x03\x02\x02\x02\x07Q\x03\x02\x02\x02\tV\x03" +
		"\x02\x02\x02\v\\\x03\x02\x02\x02\rb\x03\x02\x02\x02\x0Fk\x03\x02\x02\x02" +
		"\x11n\x03\x02\x02\x02\x13r\x03\x02\x02\x02\x15t\x03\x02\x02\x02\x17w\x03" +
		"\x02\x02\x02\x19{\x03\x02\x02\x02\x1B}\x03\x02\x02\x02\x1D\x7F\x03\x02" +
		"\x02\x02\x1F\x81\x03\x02\x02\x02!\x85\x03\x02\x02\x02#\x89\x03\x02\x02" +
		"\x02%\x8B\x03\x02\x02\x02\'\x8D\x03\x02\x02\x02)\x91\x03\x02\x02\x02+" +
		"\x95\x03\x02\x02\x02-\x97\x03\x02\x02\x02/\x99\x03\x02\x02\x021\x9B\x03" +
		"\x02\x02\x023\x9D\x03\x02\x02\x025\xA0\x03\x02\x02\x027\xA2\x03\x02\x02" +
		"\x029\xA4\x03\x02\x02\x02;\xA7\x03\x02\x02\x02=\xA9\x03\x02\x02\x02?\xAB" +
		"\x03\x02\x02\x02A\xAE\x03\x02\x02\x02C\xBF\x03\x02\x02\x02EF\x07x\x02" +
		"\x02FG\x07c\x02\x02GH\x07n\x02\x02H\x04\x03\x02\x02\x02IK\t\x02\x02\x02" +
		"JI\x03\x02\x02\x02KL\x03\x02\x02\x02LJ\x03\x02\x02\x02LM\x03\x02\x02\x02" +
		"MN\x03\x02\x02\x02NO\b\x03\x02\x02O\x06\x03\x02\x02\x02PR\x07\x80\x02" +
		"\x02QP\x03\x02\x02\x02QR\x03\x02\x02\x02RS\x03\x02\x02\x02ST\x05\x11\t" +
		"\x02T\b\x03\x02\x02\x02UW\x07\x80\x02\x02VU\x03\x02\x02\x02VW\x03\x02" +
		"\x02\x02WX\x03\x02\x02\x02XY\x05\x11\t\x02YZ\x070\x02\x02Z[\x05\x11\t" +
		"\x02[\n\x03\x02\x02\x02\\]\x07%\x02\x02]^\x07$\x02\x02^_\x03\x02\x02\x02" +
		"_`\x05\x19\r\x02`a\x07$\x02\x02a\f\x03\x02\x02\x02bf\x07$\x02\x02ce\x05" +
		"\x19\r\x02dc\x03\x02\x02\x02eh\x03\x02\x02\x02fd\x03\x02\x02\x02fg\x03" +
		"\x02\x02\x02gi\x03\x02\x02\x02hf\x03\x02\x02\x02ij\x07$\x02\x02j\x0E\x03" +
		"\x02\x02\x02kl\t\x03\x02\x02l\x10\x03\x02\x02\x02mo\x05\x0F\b\x02nm\x03" +
		"\x02\x02\x02op\x03\x02\x02\x02pn\x03\x02\x02\x02pq\x03\x02\x02\x02q\x12" +
		"\x03\x02\x02\x02rs\t\x04\x02\x02s\x14\x03\x02\x02\x02tu\x07^\x02\x02u" +
		"v\t\x05\x02\x02v\x16\x03\x02\x02\x02wx\n\x06\x02\x02x\x18\x03\x02\x02" +
		"\x02y|\x05\x15\v\x02z|\x05\x17\f\x02{y\x03\x02\x02\x02{z\x03\x02\x02\x02" +
		"|\x1A\x03\x02\x02\x02}~\x07*\x02\x02~\x1C\x03\x02\x02\x02\x7F\x80\x07" +
		"+\x02\x02\x80\x1E\x03\x02\x02\x02\x81\x82\x07t\x02\x02\x82\x83\x07g\x02" +
		"\x02\x83\x84\x07e\x02\x02\x84 \x03\x02\x02\x02\x85\x86\x07c\x02\x02\x86" +
		"\x87\x07p\x02\x02\x87\x88\x07f\x02\x02\x88\"\x03\x02\x02\x02\x89\x8A\x07" +
		"=\x02\x02\x8A$\x03\x02\x02\x02\x8B\x8C\x071\x02\x02\x8C&\x03\x02\x02\x02" +
		"\x8D\x8E\x07f\x02\x02\x8E\x8F\x07k\x02\x02\x8F\x90\x07x\x02\x02\x90(\x03" +
		"\x02\x02\x02\x91\x92\x07o\x02\x02\x92\x93\x07q\x02\x02\x93\x94\x07f\x02" +
		"\x02\x94*\x03\x02\x02\x02\x95\x96\x07,\x02\x02\x96,\x03\x02\x02\x02\x97" +
		"\x98\x07-\x02\x02\x98.\x03\x02\x02\x02\x99\x9A\x07/\x02\x02\x9A0\x03\x02" +
		"\x02\x02\x9B\x9C\x07`\x02\x02\x9C2\x03\x02\x02\x02\x9D\x9E\x07<\x02\x02" +
		"\x9E\x9F\x07<\x02\x02\x9F4\x03\x02\x02\x02\xA0\xA1\x07B\x02\x02\xA16\x03" +
		"\x02\x02\x02\xA2\xA3\x07?\x02\x02\xA38\x03\x02\x02\x02\xA4\xA5\x07>\x02" +
		"\x02\xA5\xA6\x07@\x02\x02\xA6:\x03\x02\x02\x02\xA7\xA8\x07>\x02\x02\xA8" +
		"<\x03\x02\x02\x02\xA9\xAA\x07@\x02\x02\xAA>\x03\x02\x02\x02\xAB\xAC\x07" +
		">\x02\x02\xAC\xAD\x07?\x02\x02\xAD@\x03\x02\x02\x02\xAE\xAF\x07@\x02\x02" +
		"\xAF\xB0\x07?\x02\x02\xB0B\x03\x02\x02\x02\xB1\xB7\x05\x13\n\x02\xB2\xB6" +
		"\x05\x13\n\x02\xB3\xB6\x05\x0F\b\x02\xB4\xB6\t\x07\x02\x02\xB5\xB2\x03" +
		"\x02\x02\x02\xB5\xB3\x03\x02\x02\x02\xB5\xB4\x03\x02\x02\x02\xB6\xB9\x03" +
		"\x02\x02\x02\xB7\xB5\x03\x02\x02\x02\xB7\xB8\x03\x02\x02\x02\xB8\xC0\x03" +
		"\x02\x02\x02\xB9\xB7\x03\x02\x02\x02\xBA\xBC\t\b\x02\x02\xBB\xBA\x03\x02" +
		"\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xBB\x03\x02\x02\x02\xBD\xBE\x03\x02" +
		"\x02\x02\xBE\xC0\x03\x02\x02\x02\xBF\xB1\x03\x02\x02\x02\xBF\xBB\x03\x02" +
		"\x02\x02\xC0D\x03\x02\x02\x02\r\x02LQVfp{\xB5\xB7\xBD\xBF\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SmlLexer.__ATN) {
			SmlLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SmlLexer._serializedATN));
		}

		return SmlLexer.__ATN;
	}

}

