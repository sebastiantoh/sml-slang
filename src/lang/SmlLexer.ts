// Generated from src/lang/Sml.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SmlLexer extends Lexer {
	public static readonly WHITESPACE = 1;
	public static readonly INT = 2;
	public static readonly FLOAT = 3;
	public static readonly CHAR = 4;
	public static readonly STRING = 5;
	public static readonly SLASH = 6;
	public static readonly DIV = 7;
	public static readonly MOD = 8;
	public static readonly STAR = 9;
	public static readonly PLUS = 10;
	public static readonly MINUS = 11;
	public static readonly ID = 12;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"WHITESPACE", "INT", "FLOAT", "CHAR", "STRING", "DIGIT", "NUM", "LETTER", 
		"ESC", "SAFECODEPOINT", "ASCII", "SLASH", "DIV", "MOD", "STAR", "PLUS", 
		"MINUS", "ID",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "'/'", 
		"'div'", "'mod'", "'*'", "'+'", "'-'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "WHITESPACE", "INT", "FLOAT", "CHAR", "STRING", "SLASH", "DIV", 
		"MOD", "STAR", "PLUS", "MINUS", "ID",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SmlLexer._LITERAL_NAMES, SmlLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SmlLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SmlLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Sml.g4"; }

	// @Override
	public get ruleNames(): string[] { return SmlLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SmlLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SmlLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SmlLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0E{\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x03\x02\x06\x02)\n\x02\r\x02\x0E\x02*\x03\x02\x03\x02\x03" +
		"\x03\x05\x030\n\x03\x03\x03\x03\x03\x03\x04\x05\x045\n\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x07\x06C\n\x06\f\x06\x0E\x06F\v\x06\x03\x06\x03\x06\x03\x07" +
		"\x03\x07\x03\b\x06\bM\n\b\r\b\x0E\bN\x03\t\x03\t\x03\n\x03\n\x03\n\x03" +
		"\v\x03\v\x03\f\x03\f\x05\fZ\n\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13p\n\x13\f\x13\x0E" +
		"\x13s\v\x13\x03\x13\x06\x13v\n\x13\r\x13\x0E\x13w\x05\x13z\n\x13\x02\x02" +
		"\x02\x14\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02" +
		"\x02\x0F\x02\x02\x11\x02\x02\x13\x02\x02\x15\x02\x02\x17\x02\x02\x19\x02" +
		"\b\x1B\x02\t\x1D\x02\n\x1F\x02\v!\x02\f#\x02\r%\x02\x0E\x03\x02\t\x05" +
		"\x02\v\f\x0F\x0F\"\"\x03\x022;\x04\x02C\\c|\n\x02$$11^^ddhhppttvv\x05" +
		"\x02\x02!$$^^\x04\x02))aa\x0E\x02##%(,-//11<<>B^^``bb~~\x80\x80\x02\x7F" +
		"\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
		"\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02" +
		"\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02" +
		"!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x03(\x03\x02" +
		"\x02\x02\x05/\x03\x02\x02\x02\x074\x03\x02\x02\x02\t:\x03\x02\x02\x02" +
		"\v@\x03\x02\x02\x02\rI\x03\x02\x02\x02\x0FL\x03\x02\x02\x02\x11P\x03\x02" +
		"\x02\x02\x13R\x03\x02\x02\x02\x15U\x03\x02\x02\x02\x17Y\x03\x02\x02\x02" +
		"\x19[\x03\x02\x02\x02\x1B]\x03\x02\x02\x02\x1Da\x03\x02\x02\x02\x1Fe\x03" +
		"\x02\x02\x02!g\x03\x02\x02\x02#i\x03\x02\x02\x02%y\x03\x02\x02\x02\')" +
		"\t\x02\x02\x02(\'\x03\x02\x02\x02)*\x03\x02\x02\x02*(\x03\x02\x02\x02" +
		"*+\x03\x02\x02\x02+,\x03\x02\x02\x02,-\b\x02\x02\x02-\x04\x03\x02\x02" +
		"\x02.0\x07\x80\x02\x02/.\x03\x02\x02\x02/0\x03\x02\x02\x0201\x03\x02\x02" +
		"\x0212\x05\x0F\b\x022\x06\x03\x02\x02\x0235\x07\x80\x02\x0243\x03\x02" +
		"\x02\x0245\x03\x02\x02\x0256\x03\x02\x02\x0267\x05\x0F\b\x0278\x070\x02" +
		"\x0289\x05\x0F\b\x029\b\x03\x02\x02\x02:;\x07%\x02\x02;<\x07$\x02\x02" +
		"<=\x03\x02\x02\x02=>\x05\x17\f\x02>?\x07$\x02\x02?\n\x03\x02\x02\x02@" +
		"D\x07$\x02\x02AC\x05\x17\f\x02BA\x03\x02\x02\x02CF\x03\x02\x02\x02DB\x03" +
		"\x02\x02\x02DE\x03\x02\x02\x02EG\x03\x02\x02\x02FD\x03\x02\x02\x02GH\x07" +
		"$\x02\x02H\f\x03\x02\x02\x02IJ\t\x03\x02\x02J\x0E\x03\x02\x02\x02KM\x05" +
		"\r\x07\x02LK\x03\x02\x02\x02MN\x03\x02\x02\x02NL\x03\x02\x02\x02NO\x03" +
		"\x02\x02\x02O\x10\x03\x02\x02\x02PQ\t\x04\x02\x02Q\x12\x03\x02\x02\x02" +
		"RS\x07^\x02\x02ST\t\x05\x02\x02T\x14\x03\x02\x02\x02UV\n\x06\x02\x02V" +
		"\x16\x03\x02\x02\x02WZ\x05\x13\n\x02XZ\x05\x15\v\x02YW\x03\x02\x02\x02" +
		"YX\x03\x02\x02\x02Z\x18\x03\x02\x02\x02[\\\x071\x02\x02\\\x1A\x03\x02" +
		"\x02\x02]^\x07f\x02\x02^_\x07k\x02\x02_`\x07x\x02\x02`\x1C\x03\x02\x02" +
		"\x02ab\x07o\x02\x02bc\x07q\x02\x02cd\x07f\x02\x02d\x1E\x03\x02\x02\x02" +
		"ef\x07,\x02\x02f \x03\x02\x02\x02gh\x07-\x02\x02h\"\x03\x02\x02\x02ij" +
		"\x07/\x02\x02j$\x03\x02\x02\x02kq\x05\x11\t\x02lp\x05\x11\t\x02mp\x05" +
		"\r\x07\x02np\t\x07\x02\x02ol\x03\x02\x02\x02om\x03\x02\x02\x02on\x03\x02" +
		"\x02\x02ps\x03\x02\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02rz\x03\x02" +
		"\x02\x02sq\x03\x02\x02\x02tv\t\b\x02\x02ut\x03\x02\x02\x02vw\x03\x02\x02" +
		"\x02wu\x03\x02\x02\x02wx\x03\x02\x02\x02xz\x03\x02\x02\x02yk\x03\x02\x02" +
		"\x02yu\x03\x02\x02\x02z&\x03\x02\x02\x02\r\x02*/4DNYoqwy\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SmlLexer.__ATN) {
			SmlLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SmlLexer._serializedATN));
		}

		return SmlLexer.__ATN;
	}

}

