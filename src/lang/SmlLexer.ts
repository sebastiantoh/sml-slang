// Generated from src/lang/Sml.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SmlLexer extends Lexer {
	public static readonly WHITESPACE = 1;
	public static readonly INT = 2;
	public static readonly FLOAT = 3;
	public static readonly CHAR = 4;
	public static readonly STRING = 5;
	public static readonly ID = 6;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"WHITESPACE", "INT", "FLOAT", "CHAR", "STRING", "DIGIT", "NUM", "LETTER", 
		"ESC", "SAFECODEPOINT", "ASCII", "ID",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "WHITESPACE", "INT", "FLOAT", "CHAR", "STRING", "ID",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SmlLexer._LITERAL_NAMES, SmlLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SmlLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SmlLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Sml.g4"; }

	// @Override
	public get ruleNames(): string[] { return SmlLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SmlLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SmlLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SmlLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\b_\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x03\x02\x06\x02\x1D\n\x02\r\x02\x0E\x02\x1E\x03\x02\x03\x02\x03\x03\x05" +
		"\x03$\n\x03\x03\x03\x03\x03\x03\x04\x05\x04)\n\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x07\x067\n\x06\f\x06\x0E\x06:\v\x06\x03\x06\x03\x06\x03\x07\x03\x07" +
		"\x03\b\x06\bA\n\b\r\b\x0E\bB\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v" +
		"\x03\f\x03\f\x05\fN\n\f\x03\r\x03\r\x03\r\x03\r\x07\rT\n\r\f\r\x0E\rW" +
		"\v\r\x03\r\x06\rZ\n\r\r\r\x0E\r[\x05\r^\n\r\x02\x02\x02\x0E\x03\x02\x03" +
		"\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\x02\x0F\x02\x02\x11" +
		"\x02\x02\x13\x02\x02\x15\x02\x02\x17\x02\x02\x19\x02\b\x03\x02\t\x05\x02" +
		"\v\f\x0F\x0F\"\"\x03\x022;\x04\x02C\\c|\n\x02$$11^^ddhhppttvv\x05\x02" +
		"\x02!$$^^\x04\x02))aa\x0E\x02##%(,-//11<<>B^^``bb~~\x80\x80\x02c\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x03\x1C" +
		"\x03\x02\x02\x02\x05#\x03\x02\x02\x02\x07(\x03\x02\x02\x02\t.\x03\x02" +
		"\x02\x02\v4\x03\x02\x02\x02\r=\x03\x02\x02\x02\x0F@\x03\x02\x02\x02\x11" +
		"D\x03\x02\x02\x02\x13F\x03\x02\x02\x02\x15I\x03\x02\x02\x02\x17M\x03\x02" +
		"\x02\x02\x19]\x03\x02\x02\x02\x1B\x1D\t\x02\x02\x02\x1C\x1B\x03\x02\x02" +
		"\x02\x1D\x1E\x03\x02\x02\x02\x1E\x1C\x03\x02\x02\x02\x1E\x1F\x03\x02\x02" +
		"\x02\x1F \x03\x02\x02\x02 !\b\x02\x02\x02!\x04\x03\x02\x02\x02\"$\x07" +
		"\x80\x02\x02#\"\x03\x02\x02\x02#$\x03\x02\x02\x02$%\x03\x02\x02\x02%&" +
		"\x05\x0F\b\x02&\x06\x03\x02\x02\x02\')\x07\x80\x02\x02(\'\x03\x02\x02" +
		"\x02()\x03\x02\x02\x02)*\x03\x02\x02\x02*+\x05\x0F\b\x02+,\x070\x02\x02" +
		",-\x05\x0F\b\x02-\b\x03\x02\x02\x02./\x07%\x02\x02/0\x07$\x02\x0201\x03" +
		"\x02\x02\x0212\x05\x17\f\x0223\x07$\x02\x023\n\x03\x02\x02\x0248\x07$" +
		"\x02\x0257\x05\x17\f\x0265\x03\x02\x02\x027:\x03\x02\x02\x0286\x03\x02" +
		"\x02\x0289\x03\x02\x02\x029;\x03\x02\x02\x02:8\x03\x02\x02\x02;<\x07$" +
		"\x02\x02<\f\x03\x02\x02\x02=>\t\x03\x02\x02>\x0E\x03\x02\x02\x02?A\x05" +
		"\r\x07\x02@?\x03\x02\x02\x02AB\x03\x02\x02\x02B@\x03\x02\x02\x02BC\x03" +
		"\x02\x02\x02C\x10\x03\x02\x02\x02DE\t\x04\x02\x02E\x12\x03\x02\x02\x02" +
		"FG\x07^\x02\x02GH\t\x05\x02\x02H\x14\x03\x02\x02\x02IJ\n\x06\x02\x02J" +
		"\x16\x03\x02\x02\x02KN\x05\x13\n\x02LN\x05\x15\v\x02MK\x03\x02\x02\x02" +
		"ML\x03\x02\x02\x02N\x18\x03\x02\x02\x02OU\x05\x11\t\x02PT\x05\x11\t\x02" +
		"QT\x05\r\x07\x02RT\t\x07\x02\x02SP\x03\x02\x02\x02SQ\x03\x02\x02\x02S" +
		"R\x03\x02\x02\x02TW\x03\x02\x02\x02US\x03\x02\x02\x02UV\x03\x02\x02\x02" +
		"V^\x03\x02\x02\x02WU\x03\x02\x02\x02XZ\t\b\x02\x02YX\x03\x02\x02\x02Z" +
		"[\x03\x02\x02\x02[Y\x03\x02\x02\x02[\\\x03\x02\x02\x02\\^\x03\x02\x02" +
		"\x02]O\x03\x02\x02\x02]Y\x03\x02\x02\x02^\x1A\x03\x02\x02\x02\r\x02\x1E" +
		"#(8BMSU[]\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SmlLexer.__ATN) {
			SmlLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SmlLexer._serializedATN));
		}

		return SmlLexer.__ATN;
	}

}

