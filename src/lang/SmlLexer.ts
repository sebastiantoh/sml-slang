// Generated from src/lang/Sml.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SmlLexer extends Lexer {
	public static readonly WHITESPACE = 1;
	public static readonly INT = 2;
	public static readonly FLOAT = 3;
	public static readonly CHAR = 4;
	public static readonly STRING = 5;
	public static readonly LPAREN = 6;
	public static readonly RPAREN = 7;
	public static readonly SLASH = 8;
	public static readonly DIV = 9;
	public static readonly MOD = 10;
	public static readonly STAR = 11;
	public static readonly PLUS = 12;
	public static readonly MINUS = 13;
	public static readonly CARET = 14;
	public static readonly CONS = 15;
	public static readonly AT = 16;
	public static readonly EQ = 17;
	public static readonly NEQ = 18;
	public static readonly LT = 19;
	public static readonly GT = 20;
	public static readonly LTE = 21;
	public static readonly GTE = 22;
	public static readonly ID = 23;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"WHITESPACE", "INT", "FLOAT", "CHAR", "STRING", "DIGIT", "NUM", "LETTER", 
		"ESC", "SAFECODEPOINT", "ASCII", "LPAREN", "RPAREN", "SLASH", "DIV", "MOD", 
		"STAR", "PLUS", "MINUS", "CARET", "CONS", "AT", "EQ", "NEQ", "LT", "GT", 
		"LTE", "GTE", "ID",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, "'('", 
		"')'", "'/'", "'div'", "'mod'", "'*'", "'+'", "'-'", "'^'", "'::'", "'@'", 
		"'='", "'<>'", "'<'", "'>'", "'<='", "'>='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "WHITESPACE", "INT", "FLOAT", "CHAR", "STRING", "LPAREN", "RPAREN", 
		"SLASH", "DIV", "MOD", "STAR", "PLUS", "MINUS", "CARET", "CONS", "AT", 
		"EQ", "NEQ", "LT", "GT", "LTE", "GTE", "ID",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SmlLexer._LITERAL_NAMES, SmlLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SmlLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SmlLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Sml.g4"; }

	// @Override
	public get ruleNames(): string[] { return SmlLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SmlLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SmlLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SmlLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x19\xAB\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x03\x02\x06\x02?\n\x02\r\x02\x0E\x02" +
		"@\x03\x02\x03\x02\x03\x03\x05\x03F\n\x03\x03\x03\x03\x03\x03\x04\x05\x04" +
		"K\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x06\x03\x06\x07\x06Y\n\x06\f\x06\x0E\x06\\\v\x06" +
		"\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x06\bc\n\b\r\b\x0E\bd\x03\t\x03" +
		"\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x05\fp\n\f\x03\r\x03\r\x03" +
		"\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03" +
		"\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03" +
		"\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03" +
		"\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\xA0" +
		"\n\x1E\f\x1E\x0E\x1E\xA3\v\x1E\x03\x1E\x06\x1E\xA6\n\x1E\r\x1E\x0E\x1E" +
		"\xA7\x05\x1E\xAA\n\x1E\x02\x02\x02\x1F\x03\x02\x03\x05\x02\x04\x07\x02" +
		"\x05\t\x02\x06\v\x02\x07\r\x02\x02\x0F\x02\x02\x11\x02\x02\x13\x02\x02" +
		"\x15\x02\x02\x17\x02\x02\x19\x02\b\x1B\x02\t\x1D\x02\n\x1F\x02\v!\x02" +
		"\f#\x02\r%\x02\x0E\'\x02\x0F)\x02\x10+\x02\x11-\x02\x12/\x02\x131\x02" +
		"\x143\x02\x155\x02\x167\x02\x179\x02\x18;\x02\x19\x03\x02\t\x05\x02\v" +
		"\f\x0F\x0F\"\"\x03\x022;\x04\x02C\\c|\n\x02$$11^^ddhhppttvv\x05\x02\x02" +
		"!$$^^\x04\x02))aa\x0E\x02##%(,-//11<<>B^^``bb~~\x80\x80\x02\xAF\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B" +
		"\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!" +
		"\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02" +
		"\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02" +
		"\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03" +
		"\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02" +
		"\x02\x03>\x03\x02\x02\x02\x05E\x03\x02\x02\x02\x07J\x03\x02\x02\x02\t" +
		"P\x03\x02\x02\x02\vV\x03\x02\x02\x02\r_\x03\x02\x02\x02\x0Fb\x03\x02\x02" +
		"\x02\x11f\x03\x02\x02\x02\x13h\x03\x02\x02\x02\x15k\x03\x02\x02\x02\x17" +
		"o\x03\x02\x02\x02\x19q\x03\x02\x02\x02\x1Bs\x03\x02\x02\x02\x1Du\x03\x02" +
		"\x02\x02\x1Fw\x03\x02\x02\x02!{\x03\x02\x02\x02#\x7F\x03\x02\x02\x02%" +
		"\x81\x03\x02\x02\x02\'\x83\x03\x02\x02\x02)\x85\x03\x02\x02\x02+\x87\x03" +
		"\x02\x02\x02-\x8A\x03\x02\x02\x02/\x8C\x03\x02\x02\x021\x8E\x03\x02\x02" +
		"\x023\x91\x03\x02\x02\x025\x93\x03\x02\x02\x027\x95\x03\x02\x02\x029\x98" +
		"\x03\x02\x02\x02;\xA9\x03\x02\x02\x02=?\t\x02\x02\x02>=\x03\x02\x02\x02" +
		"?@\x03\x02\x02\x02@>\x03\x02\x02\x02@A\x03\x02\x02\x02AB\x03\x02\x02\x02" +
		"BC\b\x02\x02\x02C\x04\x03\x02\x02\x02DF\x07\x80\x02\x02ED\x03\x02\x02" +
		"\x02EF\x03\x02\x02\x02FG\x03\x02\x02\x02GH\x05\x0F\b\x02H\x06\x03\x02" +
		"\x02\x02IK\x07\x80\x02\x02JI\x03\x02\x02\x02JK\x03\x02\x02\x02KL\x03\x02" +
		"\x02\x02LM\x05\x0F\b\x02MN\x070\x02\x02NO\x05\x0F\b\x02O\b\x03\x02\x02" +
		"\x02PQ\x07%\x02\x02QR\x07$\x02\x02RS\x03\x02\x02\x02ST\x05\x17\f\x02T" +
		"U\x07$\x02\x02U\n\x03\x02\x02\x02VZ\x07$\x02\x02WY\x05\x17\f\x02XW\x03" +
		"\x02\x02\x02Y\\\x03\x02\x02\x02ZX\x03\x02\x02\x02Z[\x03\x02\x02\x02[]" +
		"\x03\x02\x02\x02\\Z\x03\x02\x02\x02]^\x07$\x02\x02^\f\x03\x02\x02\x02" +
		"_`\t\x03\x02\x02`\x0E\x03\x02\x02\x02ac\x05\r\x07\x02ba\x03\x02\x02\x02" +
		"cd\x03\x02\x02\x02db\x03\x02\x02\x02de\x03\x02\x02\x02e\x10\x03\x02\x02" +
		"\x02fg\t\x04\x02\x02g\x12\x03\x02\x02\x02hi\x07^\x02\x02ij\t\x05\x02\x02" +
		"j\x14\x03\x02\x02\x02kl\n\x06\x02\x02l\x16\x03\x02\x02\x02mp\x05\x13\n" +
		"\x02np\x05\x15\v\x02om\x03\x02\x02\x02on\x03\x02\x02\x02p\x18\x03\x02" +
		"\x02\x02qr\x07*\x02\x02r\x1A\x03\x02\x02\x02st\x07+\x02\x02t\x1C\x03\x02" +
		"\x02\x02uv\x071\x02\x02v\x1E\x03\x02\x02\x02wx\x07f\x02\x02xy\x07k\x02" +
		"\x02yz\x07x\x02\x02z \x03\x02\x02\x02{|\x07o\x02\x02|}\x07q\x02\x02}~" +
		"\x07f\x02\x02~\"\x03\x02\x02\x02\x7F\x80\x07,\x02\x02\x80$\x03\x02\x02" +
		"\x02\x81\x82\x07-\x02\x02\x82&\x03\x02\x02\x02\x83\x84\x07/\x02\x02\x84" +
		"(\x03\x02\x02\x02\x85\x86\x07`\x02\x02\x86*\x03\x02\x02\x02\x87\x88\x07" +
		"<\x02\x02\x88\x89\x07<\x02\x02\x89,\x03\x02\x02\x02\x8A\x8B\x07B\x02\x02" +
		"\x8B.\x03\x02\x02\x02\x8C\x8D\x07?\x02\x02\x8D0\x03\x02\x02\x02\x8E\x8F" +
		"\x07>\x02\x02\x8F\x90\x07@\x02\x02\x902\x03\x02\x02\x02\x91\x92\x07>\x02" +
		"\x02\x924\x03\x02\x02\x02\x93\x94\x07@\x02\x02\x946\x03\x02\x02\x02\x95" +
		"\x96\x07>\x02\x02\x96\x97\x07?\x02\x02\x978\x03\x02\x02\x02\x98\x99\x07" +
		"@\x02\x02\x99\x9A\x07?\x02\x02\x9A:\x03\x02\x02\x02\x9B\xA1\x05\x11\t" +
		"\x02\x9C\xA0\x05\x11\t\x02\x9D\xA0\x05\r\x07\x02\x9E\xA0\t\x07\x02\x02" +
		"\x9F\x9C\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F\x9E\x03\x02\x02\x02" +
		"\xA0\xA3\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA1\xA2\x03\x02\x02\x02" +
		"\xA2\xAA\x03\x02\x02\x02\xA3\xA1\x03\x02\x02\x02\xA4\xA6\t\b\x02\x02\xA5" +
		"\xA4\x03\x02\x02\x02\xA6\xA7\x03\x02\x02\x02\xA7\xA5\x03\x02\x02\x02\xA7" +
		"\xA8\x03\x02\x02\x02\xA8\xAA\x03\x02\x02\x02\xA9\x9B\x03\x02\x02\x02\xA9" +
		"\xA5\x03\x02\x02\x02\xAA<\x03\x02\x02\x02\r\x02@EJZdo\x9F\xA1\xA7\xA9" +
		"\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SmlLexer.__ATN) {
			SmlLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SmlLexer._serializedATN));
		}

		return SmlLexer.__ATN;
	}

}

